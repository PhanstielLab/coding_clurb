[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Phanstiel Lab Coding Club",
    "section": "",
    "text": "Preface\nThis is a Quarto book housing the notes and resources for the weekly Phanstiel Lab Coding Club!\nWe’re hoping to use this space to share resources, code snippets, and other helpful information for the computational students, postdocs, and Dougs of the lab.\nCurrently (as of Dec 2024), we meet every Monday at 1pm!\nHere’s a list of things we plan to discuss:\nWishlist:\n\nGO analysis / Homer\nWorkflow management - snakemake/make/nextflow\ngithub / branches & merging\ngranges/ginteractions/annotation hub\nJuicer\nMotif analysis\nDESeq2\nTidyomics\nPackage dev\ndocker/conda\nCode semantics/structure - linters\nslurm/longleaf\nAliases - share your bash_profile\n.ssh keys!\nGlobus!\nMultipanel figures with plotgardner\nIntro to java\nIntro to python\nDashboard\nShiny\nadvancedR\nQuarto/RMarkdown\nTool sharing\nDeeptools\nSEMplR - MotifBreaker\nNetwork Analysis\nMachine Learning\nClustering - KMeans, PCA\nGoogle scripting\nIDEs - vscode, jupyter, pycharm, ondemand\ntexteditors\n\n\n\nPast Coding Clubs\n\n12/16/24: .bashrc/.bash_profile & snakemake hello world"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "bashProfile.html",
    "href": "bashProfile.html",
    "title": "1  your bash profile!",
    "section": "",
    "text": "2 .bash_profile vs .bashrc\nBoth .bash_profile and .bashrc are found in your home directory (~). A .bashrc is loaded every time you start a new bash session. A .bash_profile is only loaded when you log in or tell bash to act as a login shell.\nExamples: \n- Logging into longleaf will load both your .bashrc and .bash_profile. - Starting an interactive session will only load your .bashrc - Starting a screen/tmux session only loads .bashrc\nEither files can be loaded by sourcing them directly. ie: source ~/.bashrc\n\n\n3 .bash_profile Favorites\n# change directory to work, users, or proj space\nalias work='cd /work/users/[initial/initial/onyen]'\nalias user='cd /users/[initial/initial/onyen]\nalias proj='cd /proj/phanstiel_lab/'\n\n# check slurm queue status\nalias sq='squeue -u [onyen]'\n\n# start a one hour interactive session\nalias interact='srun -p interact -N 1 -n 1 --mem=4g --pty /bin/bash'\n\n# list all files\nalias ll='ls -al'"
  },
  {
    "objectID": "sshKeys.html",
    "href": "sshKeys.html",
    "title": "2  SSH Keys",
    "section": "",
    "text": "What are SSH keys?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>SSH Keys</span>"
    ]
  },
  {
    "objectID": "snakemake.html",
    "href": "snakemake.html",
    "title": "3  snakemake",
    "section": "",
    "text": "4 Part 1 - Hello World!\n12/16/2023"
  },
  {
    "objectID": "snakemake.html#first-hello-world-rule",
    "href": "snakemake.html#first-hello-world-rule",
    "title": "3  snakemake",
    "section": "4.1 First Hello World rule",
    "text": "4.1 First Hello World rule\nFirst, make a new file called Snakefile and within this file, let’s make a simple rule called all:\nrule all:\n    output:\n        \"hello_world.txt\"\n    shell:\n        \"echo Hello World! &gt; hello_world.txt\"\nThis rule expects an output file called hello_world.txt and will run the process outlined in the shell section to create that file.\nTo run this, go back to the shell and run:\nsnakemake --cores 1\nNow we should see a new file called hello_world.txt in our working directory and the file should contain the text “Hello World”.\nCongratulations! You just made your first snakemake workflow!!"
  },
  {
    "objectID": "snakemake.html#second-hello-world-rule",
    "href": "snakemake.html#second-hello-world-rule",
    "title": "3  snakemake",
    "section": "4.2 Second Hello World rule",
    "text": "4.2 Second Hello World rule\nNow, let’s start to build a workflow that has multiple rules. In the previous example, we had a single rule called all. In snakemake all is a special rule name. By default, snakemake will always try to run the all rule.\nLet’s make a new rule called say_hello and pass it the same arguments from our previous workflow and change our all rule to just have an input that is equivalent to the output of the say_hello rule:\nrule all:\n    input:\n        \"hello_world.txt\"\n\nrule say_hello:\n    output:\n        \"hello_world.txt\"\n    shell:\n        \"echo Hello World! &gt; hello_world.txt\"\nNow, let’s try to run the snakefile again with the same command (if the hello_world.txt file still exists from the previous example, delete it before running):\nsnakemake --cores 1\nWe should now see a new hello_world.txt file that is identical to the previous. The logic of what’s happening here: 1. snakemake first tries to run the all rule 2. it sees that in order to run the all rule, it needs an input file hello_world.txt 3. it looks through all of the rules for a rule that has hello_world.txt as an output file and finds say_hello 4. it runs say_hello to make hello_world.txt 5. it goes back to the all rule and since we have no other required input and we didn’t ask the all rule to do anything, the all rule is complete and we’re done!\nNaming the Snakefile something else: \nWhen called, snakemake will look for a file named Snakefile or snakefile by default. If you would like to name your pipeline something else, you need to tell snakemake what file to run with the -s option liek this:\nsnakemake --cores 1 -s [snakefile_name]"
  },
  {
    "objectID": "bashProfile.html#bash_profile-vs-.bashrc",
    "href": "bashProfile.html#bash_profile-vs-.bashrc",
    "title": "1  your bash profile!",
    "section": "1.1 .bash_profile vs .bashrc",
    "text": "1.1 .bash_profile vs .bashrc\n12/16/2024\nBoth .bash_profile and .bashrc are found in your home directory (~). A .bashrc is loaded every time you start a new bash session. A .bash_profile is only loaded when you log in or tell bash to act as a login shell.\nExamples: \n- Logging into longleaf will load both your .bashrc and .bash_profile. - Starting an interactive session will only load your .bashrc - Starting a screen/tmux session only loads .bashrc\nEither files can be loaded by sourcing them directly. ie: source ~/.bashrc"
  },
  {
    "objectID": "bashProfile.html#bash_profile-favorites",
    "href": "bashProfile.html#bash_profile-favorites",
    "title": "1  your bash profile!",
    "section": "1.2 .bash_profile Favorites",
    "text": "1.2 .bash_profile Favorites\n12/16/2024\n# change directory to work, users, or proj space\nalias work='cd /work/users/[initial/initial/onyen]'\nalias user='cd /users/[initial/initial/onyen]\nalias proj='cd /proj/phanstiel_lab/'\n\n# check slurm queue status\nalias sq='squeue -u [onyen]'\n\n# start a one hour interactive session\nalias interact='srun -p interact -N 1 -n 1 --mem=4g --pty /bin/bash'\n\n# list all files\nalias ll='ls -al'"
  },
  {
    "objectID": "snakemake.html#part-1---hello-world",
    "href": "snakemake.html#part-1---hello-world",
    "title": "3  snakemake",
    "section": "3.1 Part 1 - Hello World!",
    "text": "3.1 Part 1 - Hello World!\n12/16/2024\n\n3.1.1 First Hello World rule\nFirst, make a new file called Snakefile and within this file, let’s make a simple rule called all:\nrule all:\n    output:\n        \"hello_world.txt\"\n    shell:\n        \"echo Hello World! &gt; hello_world.txt\"\nThis rule expects an output file called hello_world.txt and will run the process outlined in the shell section to create that file.\nTo run this, go back to the shell and run:\nsnakemake --cores 1\nNow we should see a new file called hello_world.txt in our working directory and the file should contain the text “Hello World”.\nCongratulations! You just made your first snakemake workflow!!\n\n\n3.1.2 Second Hello World rule\nNow, let’s start to build a workflow that has multiple rules. In the previous example, we had a single rule called all. In snakemake all is a special rule name. By default, snakemake will always try to run the all rule.\nLet’s make a new rule called say_hello and pass it the same arguments from our previous workflow and change our all rule to just have an input that is equivalent to the output of the say_hello rule:\nrule all:\n    input:\n        \"hello_world.txt\"\n\nrule say_hello:\n    output:\n        \"hello_world.txt\"\n    shell:\n        \"echo Hello World! &gt; hello_world.txt\"\nNow, let’s try to run the snakefile again with the same command (if the hello_world.txt file still exists from the previous example, delete it before running):\nsnakemake --cores 1\nWe should now see a new hello_world.txt file that is identical to the previous. The logic of what’s happening here: 1. snakemake first tries to run the all rule 2. it sees that in order to run the all rule, it needs an input file hello_world.txt 3. it looks through all of the rules for a rule that has hello_world.txt as an output file and finds say_hello 4. it runs say_hello to make hello_world.txt 5. it goes back to the all rule and since we have no other required input and we didn’t ask the all rule to do anything, the all rule is complete and we’re done!\nNaming the Snakefile something else: \nWhen called, snakemake will look for a file named Snakefile or snakefile by default. If you would like to name your pipeline something else, you need to tell snakemake what file to run with the -s option liek this:\nsnakemake --cores 1 -s [snakefile_name]"
  },
  {
    "objectID": "snakemake.html#part-2---hello-names",
    "href": "snakemake.html#part-2---hello-names",
    "title": "3  snakemake",
    "section": "3.2 Part 2 - Hello Names!",
    "text": "3.2 Part 2 - Hello Names!\n1/6/2025\nObjective: Use wildcards to run a single rule multiple times with different input.\n\n3.2.1 Dry Run\nA useful tip when expanding the functionality of your snakemake workflow is to do a “dry-run” of the workflow beforehand. To do this we add a -n to our snakemake command. Additionally, printing the commands the workflow intends to run can be helpful with the -p option.\nsnakemake --cores 1 -s [snakefile_name] -p -n\n\n\n3.2.2 Hello Name\nLet’s say we want to say hello to some string stored in a variable instead of hard coding in the word “World”. (We want the output of our process to be “Hello [some_name]”).\nLet’s make a new snakemake file called hello_name.Snakefile for our new workflow. We can first store the name we want to use in a global variable at the start of our script and then replace World with this new variable:\nNAME = \"Tooba\"\n\nrule all:\n    input:\n        \"hello_\" + NAME + \".txt\"\n\nrule say_hello:\n    output:\n        \"hello_\" + NAME + \".txt\"\n    shell:\n        \"echo Hello {NAME} &gt; {output}\"\nLet’s try to run this workflow. Since we gave our workflow a name other than Snakefile, we have to specify the file explicitly. Let’s also do a dry-run before executing the workflow:\nsnakemake -s hello_name.Snakefile --cores 1 -p -n\nThis should produce output that looks like this:\nBuilding DAG of jobs...\nJob counts:\n    count   jobs\n    1   all\n    1   say_hello\n    2\n\n[Mon Jan  6 12:26:21 2025]\nrule say_hello:\n    output: hello_Tooba.txt\n    jobid: 1\n\necho Hello Tooba &gt; hello_Tooba.txt\n\n[Mon Jan  6 12:26:21 2025]\nlocalrule all:\n    input: hello_Tooba.txt\n    jobid: 0\n\nJob counts:\n    count   jobs\n    1   all\n    1   say_hello\n    2\nThis was a dry-run (flag -n). The order of jobs does not reflect the order of execution.\nFrom this, we can see that the workflow wants to run two rules, all and say_hello. say_hello will run the command echo Hello Tooba &gt; hello_Tooba.txt and all runs nothing.\nThis looks good, so let’s execute the workflow now by removing the -n dry-run option:\nsnakemake -s hello_name.Snakefile --cores 1 -p\nYou should now see a new file called hello_Tooba.txt that contains Hello Tooba.\n\n\n3.2.3 Hello Names List\nNow, let’s expand this to running this workflow for multiple names. What if want to say hello to Tooba, JP, and Emma, but we don’t want to have to run this workflow 3 times.\nLet’s go back into our hello_name.Snakefile file and change our NAME variable to NAMES and store a list of names we want to say hello to. Next, we’ll use the expand function within the inputs of our all rule to create an expected input file for each name in our list. Lastly, we want to adjust our say_hello rule to use the name our wildcard namespace. (more on this later).\nAltogether, it will look like this:\nNAMES = [\"Tooba\", \"JP\"]\n\nrule all:\n    input:\n        expand(\"hello_{name}.txt\", name=NAMES)\n\nrule say_hello:\n    output:\n        \"hello_{name}.txt\"\n    shell:\n        \"echo Hello {wildcards.name} &gt; {output}\"\nLet’s dry-run this process first:\nsnakemake -s hello_name.Snakefile --cores 1 -pn\nThe output should look like this:\nBuilding DAG of jobs...\nJob counts:\n    count   jobs\n    1   all\n    2   say_hello\n    3\n\n[Mon Jan  6 12:58:43 2025]\nrule say_hello:\n    output: hello_JP.txt\n    jobid: 1\n    wildcards: name=JP\n\necho Hello JP &gt; hello_JP.txt\n\n[Mon Jan  6 12:58:43 2025]\nrule say_hello:\n    output: hello_Tooba.txt\n    jobid: 2\n    wildcards: name=Tooba\n\necho Hello Tooba &gt; hello_Tooba.txt\n\n[Mon Jan  6 12:58:43 2025]\nlocalrule all:\n    input: hello_Tooba.txt, hello_JP.txt\n    jobid: 0\n\nJob counts:\n    count   jobs\n    1   all\n    2   say_hello\n    3\nThis was a dry-run (flag -n). The order of jobs does not reflect the order of execution.\nNow let’s execute the workflow by removing the -n flag. This should create two new files, hello_JP.txt and hello_Tooba.txt with respective “Hello” greetings within.\nExplaination: Snakemake looks at the all rule first and sees that it needs to make files hello_Tooba.txt and hello_JP.txt to complete the rule.\nYou can learn more about wildcards in snakemake (here)[https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#snakefiles-wildcards]."
  }
]